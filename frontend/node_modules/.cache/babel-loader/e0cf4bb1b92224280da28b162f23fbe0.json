{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar utils = require('@motionone/utils');\n\nvar data = require('../data.cjs.js');\n/**\n * A list of all transformable axes. We'll use this list to generated a version\n * of each axes for each transform.\n */\n\n\nvar axes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * An ordered array of each transformable value. By default, transform values\n * will be sorted to this order.\n */\n\nvar order = [\"translate\", \"scale\", \"rotate\", \"skew\"];\nvar transformAlias = {\n  x: \"translateX\",\n  y: \"translateY\",\n  z: \"translateZ\"\n};\nvar rotation = {\n  syntax: \"<angle>\",\n  initialValue: \"0deg\",\n  toDefaultUnit: function toDefaultUnit(v) {\n    return v + \"deg\";\n  }\n};\nvar baseTransformProperties = {\n  translate: {\n    syntax: \"<length-percentage>\",\n    initialValue: \"0px\",\n    toDefaultUnit: function toDefaultUnit(v) {\n      return v + \"px\";\n    }\n  },\n  rotate: rotation,\n  scale: {\n    syntax: \"<number>\",\n    initialValue: 1,\n    toDefaultUnit: utils.noopReturn\n  },\n  skew: rotation\n};\nvar transformDefinitions = new Map();\n\nvar asTransformCssVar = function asTransformCssVar(name) {\n  return \"--motion-\".concat(name);\n};\n/**\n * Generate a list of every possible transform key\n */\n\n\nvar transforms = [\"x\", \"y\", \"z\"];\norder.forEach(function (name) {\n  axes.forEach(function (axis) {\n    transforms.push(name + axis);\n    transformDefinitions.set(asTransformCssVar(name + axis), baseTransformProperties[name]);\n  });\n});\n/**\n * A function to use with Array.sort to sort transform keys by their default order.\n */\n\nvar compareTransformOrder = function compareTransformOrder(a, b) {\n  return transforms.indexOf(a) - transforms.indexOf(b);\n};\n/**\n * Provide a quick way to check if a string is the name of a transform\n */\n\n\nvar transformLookup = new Set(transforms);\n\nvar isTransform = function isTransform(name) {\n  return transformLookup.has(name);\n};\n\nvar addTransformToElement = function addTransformToElement(element, name) {\n  // Map x to translateX etc\n  if (transformAlias[name]) name = transformAlias[name];\n\n  var _data$getAnimationDat = data.getAnimationData(element),\n      transforms = _data$getAnimationDat.transforms;\n\n  utils.addUniqueItem(transforms, name);\n  /**\n   * TODO: An optimisation here could be to cache the transform in element data\n   * and only update if this has changed.\n   */\n\n  element.style.transform = buildTransformTemplate(transforms);\n};\n\nvar buildTransformTemplate = function buildTransformTemplate(transforms) {\n  return transforms.sort(compareTransformOrder).reduce(transformListToString, \"\").trim();\n};\n\nvar transformListToString = function transformListToString(template, name) {\n  return \"\".concat(template, \" \").concat(name, \"(var(\").concat(asTransformCssVar(name), \"))\");\n};\n\nexports.addTransformToElement = addTransformToElement;\nexports.asTransformCssVar = asTransformCssVar;\nexports.axes = axes;\nexports.buildTransformTemplate = buildTransformTemplate;\nexports.compareTransformOrder = compareTransformOrder;\nexports.isTransform = isTransform;\nexports.transformAlias = transformAlias;\nexports.transformDefinitions = transformDefinitions;","map":null,"metadata":{},"sourceType":"script"}