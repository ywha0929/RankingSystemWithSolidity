{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"/home/ywha0929/ImbeddedSystem/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _defineProperty = require(\"/home/ywha0929/ImbeddedSystem/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _slicedToArray = require(\"/home/ywha0929/ImbeddedSystem/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar clamp = function clamp(min, max) {\n  return function (v) {\n    return Math.max(Math.min(v, max), min);\n  };\n};\n\nvar sanitize = function sanitize(v) {\n  return v % 1 ? Number(v.toFixed(5)) : v;\n};\n\nvar floatRegex = /(-)?([\\d]*\\.?[\\d])+/g;\nvar colorRegex = /(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2,3}\\s*\\/*\\s*[\\d\\.]+%?\\))/gi;\nvar singleColorRegex = /^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2,3}\\s*\\/*\\s*[\\d\\.]+%?\\))$/i;\n\nfunction isString(v) {\n  return typeof v === 'string';\n}\n\nvar number = {\n  test: function test(v) {\n    return typeof v === 'number';\n  },\n  parse: parseFloat,\n  transform: function transform(v) {\n    return v;\n  }\n};\nvar alpha = Object.assign(Object.assign({}, number), {\n  transform: clamp(0, 1)\n});\nvar scale = Object.assign(Object.assign({}, number), {\n  default: 1\n});\n\nvar createUnitType = function createUnitType(unit) {\n  return {\n    test: function test(v) {\n      return isString(v) && v.endsWith(unit) && v.split(' ').length === 1;\n    },\n    parse: parseFloat,\n    transform: function transform(v) {\n      return \"\".concat(v).concat(unit);\n    }\n  };\n};\n\nvar degrees = createUnitType('deg');\nvar percent = createUnitType('%');\nvar px = createUnitType('px');\nvar vh = createUnitType('vh');\nvar vw = createUnitType('vw');\nvar progressPercentage = Object.assign(Object.assign({}, percent), {\n  parse: function parse(v) {\n    return percent.parse(v) / 100;\n  },\n  transform: function transform(v) {\n    return percent.transform(v * 100);\n  }\n});\n\nvar isColorString = function isColorString(type, testProp) {\n  return function (v) {\n    return Boolean(isString(v) && singleColorRegex.test(v) && v.startsWith(type) || testProp && Object.prototype.hasOwnProperty.call(v, testProp));\n  };\n};\n\nvar splitColor = function splitColor(aName, bName, cName) {\n  return function (v) {\n    var _ref;\n\n    if (!isString(v)) return v;\n\n    var _v$match = v.match(floatRegex),\n        _v$match2 = _slicedToArray(_v$match, 4),\n        a = _v$match2[0],\n        b = _v$match2[1],\n        c = _v$match2[2],\n        alpha = _v$match2[3];\n\n    return _ref = {}, _defineProperty(_ref, aName, parseFloat(a)), _defineProperty(_ref, bName, parseFloat(b)), _defineProperty(_ref, cName, parseFloat(c)), _defineProperty(_ref, \"alpha\", alpha !== undefined ? parseFloat(alpha) : 1), _ref;\n  };\n};\n\nvar hsla = {\n  test: isColorString('hsl', 'hue'),\n  parse: splitColor('hue', 'saturation', 'lightness'),\n  transform: function transform(_ref2) {\n    var hue = _ref2.hue,\n        saturation = _ref2.saturation,\n        lightness = _ref2.lightness,\n        _ref2$alpha = _ref2.alpha,\n        alpha$1 = _ref2$alpha === void 0 ? 1 : _ref2$alpha;\n    return 'hsla(' + Math.round(hue) + ', ' + percent.transform(sanitize(saturation)) + ', ' + percent.transform(sanitize(lightness)) + ', ' + sanitize(alpha.transform(alpha$1)) + ')';\n  }\n};\nvar clampRgbUnit = clamp(0, 255);\nvar rgbUnit = Object.assign(Object.assign({}, number), {\n  transform: function transform(v) {\n    return Math.round(clampRgbUnit(v));\n  }\n});\nvar rgba = {\n  test: isColorString('rgb', 'red'),\n  parse: splitColor('red', 'green', 'blue'),\n  transform: function transform(_ref3) {\n    var red = _ref3.red,\n        green = _ref3.green,\n        blue = _ref3.blue,\n        _ref3$alpha = _ref3.alpha,\n        alpha$1 = _ref3$alpha === void 0 ? 1 : _ref3$alpha;\n    return 'rgba(' + rgbUnit.transform(red) + ', ' + rgbUnit.transform(green) + ', ' + rgbUnit.transform(blue) + ', ' + sanitize(alpha.transform(alpha$1)) + ')';\n  }\n};\n\nfunction parseHex(v) {\n  var r = '';\n  var g = '';\n  var b = '';\n  var a = '';\n\n  if (v.length > 5) {\n    r = v.substr(1, 2);\n    g = v.substr(3, 2);\n    b = v.substr(5, 2);\n    a = v.substr(7, 2);\n  } else {\n    r = v.substr(1, 1);\n    g = v.substr(2, 1);\n    b = v.substr(3, 1);\n    a = v.substr(4, 1);\n    r += r;\n    g += g;\n    b += b;\n    a += a;\n  }\n\n  return {\n    red: parseInt(r, 16),\n    green: parseInt(g, 16),\n    blue: parseInt(b, 16),\n    alpha: a ? parseInt(a, 16) / 255 : 1\n  };\n}\n\nvar hex = {\n  test: isColorString('#'),\n  parse: parseHex,\n  transform: rgba.transform\n};\nvar color = {\n  test: function test(v) {\n    return rgba.test(v) || hex.test(v) || hsla.test(v);\n  },\n  parse: function parse(v) {\n    if (rgba.test(v)) {\n      return rgba.parse(v);\n    } else if (hsla.test(v)) {\n      return hsla.parse(v);\n    } else {\n      return hex.parse(v);\n    }\n  },\n  transform: function transform(v) {\n    return isString(v) ? v : v.hasOwnProperty('red') ? rgba.transform(v) : hsla.transform(v);\n  }\n};\nvar colorToken = '${c}';\nvar numberToken = '${n}';\n\nfunction test(v) {\n  var _a, _b, _c, _d;\n\n  return isNaN(v) && isString(v) && ((_b = (_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) + ((_d = (_c = v.match(colorRegex)) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) > 0;\n}\n\nfunction analyse(v) {\n  if (typeof v === 'number') v = \"\".concat(v);\n  var values = [];\n  var numColors = 0;\n  var colors = v.match(colorRegex);\n\n  if (colors) {\n    numColors = colors.length;\n    v = v.replace(colorRegex, colorToken);\n    values.push.apply(values, _toConsumableArray(colors.map(color.parse)));\n  }\n\n  var numbers = v.match(floatRegex);\n\n  if (numbers) {\n    v = v.replace(floatRegex, numberToken);\n    values.push.apply(values, _toConsumableArray(numbers.map(number.parse)));\n  }\n\n  return {\n    values: values,\n    numColors: numColors,\n    tokenised: v\n  };\n}\n\nfunction parse(v) {\n  return analyse(v).values;\n}\n\nfunction createTransformer(v) {\n  var _analyse = analyse(v),\n      values = _analyse.values,\n      numColors = _analyse.numColors,\n      tokenised = _analyse.tokenised;\n\n  var numValues = values.length;\n  return function (v) {\n    var output = tokenised;\n\n    for (var i = 0; i < numValues; i++) {\n      output = output.replace(i < numColors ? colorToken : numberToken, i < numColors ? color.transform(v[i]) : sanitize(v[i]));\n    }\n\n    return output;\n  };\n}\n\nvar convertNumbersToZero = function convertNumbersToZero(v) {\n  return typeof v === 'number' ? 0 : v;\n};\n\nfunction getAnimatableNone(v) {\n  var parsed = parse(v);\n  var transformer = createTransformer(v);\n  return transformer(parsed.map(convertNumbersToZero));\n}\n\nvar complex = {\n  test: test,\n  parse: parse,\n  createTransformer: createTransformer,\n  getAnimatableNone: getAnimatableNone\n};\nvar maxDefaults = new Set(['brightness', 'contrast', 'saturate', 'opacity']);\n\nfunction applyDefaultFilter(v) {\n  var _v$slice$split = v.slice(0, -1).split('('),\n      _v$slice$split2 = _slicedToArray(_v$slice$split, 2),\n      name = _v$slice$split2[0],\n      value = _v$slice$split2[1];\n\n  if (name === 'drop-shadow') return v;\n\n  var _ref4 = value.match(floatRegex) || [],\n      _ref5 = _slicedToArray(_ref4, 1),\n      number = _ref5[0];\n\n  if (!number) return v;\n  var unit = value.replace(number, '');\n  var defaultValue = maxDefaults.has(name) ? 1 : 0;\n  if (number !== value) defaultValue *= 100;\n  return name + '(' + defaultValue + unit + ')';\n}\n\nvar functionRegex = /([a-z-]*)\\(.*?\\)/g;\nvar filter = Object.assign(Object.assign({}, complex), {\n  getAnimatableNone: function getAnimatableNone(v) {\n    var functions = v.match(functionRegex);\n    return functions ? functions.map(applyDefaultFilter).join(' ') : v;\n  }\n});\nexports.alpha = alpha;\nexports.color = color;\nexports.complex = complex;\nexports.degrees = degrees;\nexports.filter = filter;\nexports.hex = hex;\nexports.hsla = hsla;\nexports.number = number;\nexports.percent = percent;\nexports.progressPercentage = progressPercentage;\nexports.px = px;\nexports.rgbUnit = rgbUnit;\nexports.rgba = rgba;\nexports.scale = scale;\nexports.vh = vh;\nexports.vw = vw;","map":null,"metadata":{},"sourceType":"script"}