{"ast":null,"code":"import { __rest, __assign } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport * as React from 'react';\nimport { forwardRef, useRef, useEffect } from 'react';\nimport { ReorderContext } from '../../context/ReorderContext.mjs';\nimport { motion } from '../../render/dom/motion.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { checkReorder } from './utils/check-reorder.mjs';\n\nfunction ReorderGroup(_a, externalRef) {\n  var children = _a.children,\n      _b = _a.as,\n      as = _b === void 0 ? \"ul\" : _b,\n      _c = _a.axis,\n      axis = _c === void 0 ? \"y\" : _c,\n      onReorder = _a.onReorder,\n      values = _a.values,\n      props = __rest(_a, [\"children\", \"as\", \"axis\", \"onReorder\", \"values\"]);\n\n  var Component = useConstant(function () {\n    return motion(as);\n  });\n  var order = [];\n  var isReordering = useRef(false);\n  invariant(Boolean(values), \"Reorder.Group must be provided a values prop\");\n  var context = {\n    axis: axis,\n    registerItem: function registerItem(value, layout) {\n      /**\n       * Ensure entries can't add themselves more than once\n       */\n      if (layout && order.findIndex(function (entry) {\n        return value === entry.value;\n      }) === -1) {\n        order.push({\n          value: value,\n          layout: layout[axis]\n        });\n        order.sort(compareMin);\n      }\n    },\n    updateOrder: function updateOrder(id, offset, velocity) {\n      if (isReordering.current) return;\n      var newOrder = checkReorder(order, id, offset, velocity);\n\n      if (order !== newOrder) {\n        isReordering.current = true;\n        onReorder(newOrder.map(getValue).filter(function (value) {\n          return values.indexOf(value) !== -1;\n        }));\n      }\n    }\n  };\n  useEffect(function () {\n    isReordering.current = false;\n  });\n  return React.createElement(Component, __assign({}, props, {\n    ref: externalRef\n  }), React.createElement(ReorderContext.Provider, {\n    value: context\n  }, children));\n}\n\nvar Group = forwardRef(ReorderGroup);\n\nfunction getValue(item) {\n  return item.value;\n}\n\nfunction compareMin(a, b) {\n  return a.layout.min - b.layout.min;\n}\n\nexport { Group, ReorderGroup };","map":null,"metadata":{},"sourceType":"module"}