import { Profile } from "../../../utils";
import { Plugin } from "./abstract";
export declare type BasePluginManager = {
    getProfile(name: string): Promise<Profile>;
    updateProfile(profile: Partial<Profile>): any;
    activatePlugin(name: string): any;
    deactivatePlugin(name: string): any;
    isActive(name: string): Promise<boolean>;
    canCall(from: Profile, to: Profile, method: string): Promise<boolean>;
    toggleActive(name: string): any;
    addProfile(profile: Partial<Profile>): any;
    canActivate(from: Profile, to: Profile): Promise<boolean>;
} & Plugin;
export declare const managerMethods: string[];
interface ManagerProfile extends Profile {
    name: 'manager';
}
export declare class PluginManager extends Plugin implements BasePluginManager {
    /** Run engine activation. Implemented by Engine */
    private engineActivatePlugin;
    /** Run engine deactivation. Implemented by Engine */
    private engineDeactivatePlugin;
    protected profiles: Record<string, Profile>;
    protected actives: string[];
    methods: string[];
    protected onPluginActivated?(profile: Profile): any;
    protected onPluginDeactivated?(profile: Profile): any;
    protected onProfileAdded?(profile: Profile): any;
    constructor(profile?: ManagerProfile);
    /** Return the name of the caller. If no request provided, this mean that the method has been called from the IDE so we use "manager" */
    get requestFrom(): string;
    /**
     * Get the profile if it's registered.
     * @param name The name of the plugin
     * @note This method can be overrided
     */
    getProfile(name: string): Promise<Profile<any>>;
    /**
     * Update the profile of the plugin
     * @param profile The Updated version of the plugin
     * @note Only the caller plugin should be able to update its profile
     */
    updateProfile(profile: Partial<Profile>): void;
    /**
     * Add a profile to the list of profile
     * @param profile The profile to add
     * @note This method should only be used by the engine
     */
    addProfile(profile: Profile): void;
    /**
     * Verify if a plugin is currently active
     * @param name Name of the plugin
     */
    isActive(name: string): Promise<boolean>;
    /**
     * Check if caller can activate plugin and activate it if authorized
     * @param name The name of the plugin to activate
     */
    activatePlugin(names: string | string[]): Promise<void | void[]>;
    /**
     * Check if caller can deactivate plugin and deactivate it if authorized
     * @param name The name of the plugin to activate
     */
    deactivatePlugin(names: string | string[]): Promise<void | void[]>;
    /**
     * Activate or deactivate by bypassing permission
     * @param name The name of the plugin to activate
     * @note This method should ONLY be used by the IDE
     */
    toggleActive(names: string | string[]): Promise<void | void[]>;
    /**
     * Check if a plugin can activate another
     * @param from Profile of the caller plugin
     * @param to Profile of the target plugin
     * @note This method should be overrided
     */
    canActivate(from: Profile, to: Profile): Promise<boolean>;
    /**
     * Check if a plugin can deactivate another
     * @param from Profile of the caller plugin
     * @param to Profile of the target plugin
     * @note This method should be overrided
     */
    canDeactivate(from: Profile, to: Profile): Promise<boolean>;
    /**
     * Check if a plugin can call a method of another
     * @param from Profile of the caller plugin
     * @param to Profile of the target plugin
     * @param method Method targetted by the caller
     * @param message Method provided by the targetted method plugin
     */
    canCall(from: Profile, to: Profile, method: string, message?: string): Promise<boolean>;
}
export {};
