import { ExternalProfile, Profile } from '../../../utils/src/types/profile';
import { Message } from '../../../utils/src/types/message';
import { Plugin, PluginOptions } from './abstract';
/** List of available gateways for decentralised storage */
export declare const defaultGateways: {
    'ipfs://': (url: any, name: any) => string;
    'swarm://': (url: any, name: any) => string;
};
/** Transform the URL to use a gateway if decentralised storage is specified */
export declare function transformUrl({ url, name }: Profile & ExternalProfile): any;
export interface ExternalPluginOptions extends PluginOptions {
    transformUrl: (profile: Profile & ExternalProfile) => string;
}
export declare abstract class ExternalPlugin extends Plugin {
    protected loaded: boolean;
    protected id: number;
    protected pendingRequest: Record<number, (result: any, error: Error | string) => void>;
    protected options: Partial<ExternalPluginOptions>;
    profile: Profile & ExternalProfile;
    constructor(profile: Profile & ExternalProfile);
    protected abstract postMessage(message: Partial<Message>): void;
    deactivate(): void;
    /** Set options for an external plugin */
    setOptions(options?: Partial<ExternalPluginOptions>): void;
    /** Call a method from this plugin */
    protected callPluginMethod(key: string, payload?: any[]): Promise<any>;
    /** Perform handshake with the client if not loaded yet */
    protected handshake(): Promise<void>;
    /**
     * React when a message comes from client
     * @param message The message sent by the client
     */
    protected getMessage(message: Message): Promise<void>;
}
