import { BasePluginManager } from "../plugin/manager";
import { Plugin, PluginOptions } from '../plugin/abstract';
import { Profile } from "../../../utils";
export declare class Engine {
    private manager;
    private plugins;
    private events;
    private listeners;
    private isLoaded;
    private managerLoaded;
    onRegistration?(plugin: Plugin): void;
    /** Update the options of the plugin when beeing registered */
    setPluginOption?(profile: Profile): PluginOptions;
    constructor(manager: BasePluginManager);
    /** Wait for the engine to have loaded the manager */
    onload(cb?: () => void): Promise<void>;
    /**
     * Broadcast an event to the plugin listening
     * @param emitter Plugin name that emit the event
     * @param event The name of the event
     * @param payload The content of the event
     */
    private broadcast;
    /**
     * Start listening on an event from another plugin
     * @param listener The name of the plugin that listen on the event
     * @param emitter The name of the plugin that emit the event
     * @param event The name of the event
     * @param cb Callback function to trigger when event is trigger
     */
    private addListener;
    /**
     * Remove an event from the list of events of a listener
     * @param listener The name of the plugin that was listening on the event
     * @param emitter The name of the plugin that emit the event
     * @param event The name of the event
     */
    private removeListener;
    /**
     * Create a listener that listen only once on an event
     * @param listener The name of the plugin that listen on the event
     * @param emitter The name of the plugin that emit the event
     * @param event The name of the event
     * @param cb Callback function to trigger when event is trigger
     */
    private listenOnce;
    /**
     * Call a method of a plugin from another
     * @param caller The name of the plugin that call the method
     * @param path The path of the plugin that manage the method
     * @param method The name of the method
     * @param payload The argument to pass to the method
     */
    private callMethod;
    /**
     * Create an object to access easily any plugin registered
     * @param name Name of the caller plugin
     * @note This method creates a snapshot at the time of the time of activation
     */
    private createApp;
    /**
     * Activate a plugin by making its method and event available
     * @param name The name of the plugin
     * @note This method is trigger by the plugin manager when a plugin has been activated
     */
    private activatePlugin;
    /**
     * Deactivate a plugin by removing all event listeners and making it inaccessible
     * @param name The name of the plugin
     * @note This method is trigger by the plugin manager when a plugin has been deactivated
     */
    private deactivatePlugin;
    /**
     * Update error message when trying to call a method when not activated
     * @param plugin The deactivated plugin to update the methods from
     */
    private updateErrorHandler;
    /**
     * Register a plugin to the engine and update the manager
     * @param plugin The plugin
     */
    register(plugins: Plugin | Plugin[]): string | string[];
    /**
     * Check is a name is already registered
     * @param name Name of the plugin
     */
    isRegistered(name: string): boolean;
}
